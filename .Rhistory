chains = nchains,
iter = chain_length,
warmup = warmup_length)
# save posterior predictive check----
(pp2 <- pp_check(fit.k2, ndraws=100) + ggtitle("Model 2 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "Arial")))
# ***get model results-----
(coefs.k2 <-
summary(fit.k2)$fixed %>%
rownames_to_column(var= "term") %>%
filter(term!= "Intercept") %>%
mutate(predictor= case_when(
term == 'scaleaffiliation.lograte' ~ "affiliation rate (allogrooming + food sharing), conditioning on kinship and being caged together",
term == 'scalekinship' ~ "kinship, conditioning on affiliation rate and being caged together",
term == 'familiarTRUE' ~ "caged together, conditioning on affiliation rate and kinship")) %>%
mutate(n.pairs = nrow(t)) %>%
mutate(sample= "pairs of adults with known kinship"))
# plot model results
coefs.k2 %>%
# wrap text
mutate(label= case_when(
predictor == "affiliation rate (allogrooming + food sharing), conditioning on kinship and being caged together"~
"affiliation rate\nconditioning on kinship\nand being caged together\n",
predictor == "kinship, conditioning on affiliation rate and being caged together" ~
"kinship\nconditioning on affiliation rate\nand being caged together",
predictor == "caged together, conditioning on affiliation rate and kinship" ~
"caged together\nconditioning on affiliation rate\nand kinship",
TRUE ~ "error")) %>%
mutate(label= fct_rev(label)) %>%
ggplot(aes(x=Estimate, y=label))+
geom_vline(xintercept = 0, linetype= "solid", color= 'black')+
geom_point(size=2)+
geom_errorbarh(aes(xmin=`l-95% CI`, xmax=`u-95% CI`, height=0.1), size=1)+
xlab("effect on contact call similarity")+
ylab("")+
theme_bw()+
theme(axis.text.y = element_text(size = 12, vjust = 0.5, hjust = 0.5))
# get variables
get_variables(fit.k2)
# get samples from posterior distribution
pk2 <-
fit.k2 %>%
spread_draws(b_scalekinship, b_scaleaffiliation.lograte, b_familiarTRUE) %>%
mutate(model = "Model2") %>%
pivot_longer(b_scalekinship:b_familiarTRUE, names_to = 'term', values_to= 'coeff')
remove(t)
# MODEL 3: Does time together among non-kin predict contact call similarity?----------
#***plot familiarity effect-----
unique(d$treatment_label)
# get relevant data to plot
t <-
d %>%
filter(both_adult) %>%
filter(dyad.sex== "female") %>%
filter(kinship <0.05| is.na(kinship)) %>%
# simplify treatment label and remove treatment 2, which is not really used in comparisons
filter(treatment_rank != 2) %>%
mutate(treatment_label = substring(treatment_label, first= 4, last= 100)) %>%
# set order for plot
mutate(treatment_label = factor(treatment_label, levels= c("never met", "different wild roost\nthen caged together", "same wild roost\nthen caged together","same long-term \ncaptive colony")))
# plot means and 95% CIs
means <-
t %>%
filter(!is.na(treatment_label)) %>%
boot_ci2(x = .$treatment_label, y= .$sim)
points <-
t %>%
filter(!is.na(treatment_label)) %>%
mutate(effect= treatment_label)
# plot with raw data
(p3 <-
means %>%
ggplot(aes(x=effect, y=mean))+
geom_jitter(data= points, aes(y= sim), size=1, alpha=0.4, height=0, width=0.1, color= "darkgrey")+
geom_boxplot(data= points, aes(y= sim), width=0.1, fill=NA, color="black", outlier.shape=NA)+
geom_point(position = position_nudge(x = 0.25), size=1)+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), position = position_nudge(x = 0.25), size=1)+
ylab("contact call similarity")+
xlab("familiarity level")+
scale_colour_brewer(palette= "Dark2")+
geom_hline(yintercept = means[1,"mean"], col = "black")+
theme_bw()+
theme(legend.position = "none"))
# plot without raw data
(p4 <-
means %>%
ggplot(aes(x=effect, y=mean))+
geom_point(size=3)+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), size=1)+
ylab("contact call similarity")+
xlab(" \nfamiliarity level")+
scale_colour_brewer(palette= "Dark2")+
geom_hline(yintercept = means[1,"mean"], col = "black")+
theme_bw()+
theme(axis.text.x = element_text(size = 11))+
theme(legend.position = "none"))
# combine plots
# remove x-axis from top plot
p3a <-
p3+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
(p5 <- p3a/p4)
# save plot
ggsave(
"familiarity_plot.pdf",
plot = p5,
scale = 1,
width = 7,
height = 5,
units = c("in", "cm", "mm", "px"),
dpi = 300)
#*** fit model for introduction effect-------
# get relevant data to analyze
# get pairs of nonkin females that never met (treatment rank 1) and ones that were introduced (treatment rank 3)
# compare those two groups treatment rank 1 vs 3
t <-
d %>%
filter(both_adult) %>%
# get female dyads
filter(dyad.sex== "female") %>%
# get nonkin dyads
filter(kinship == 0) %>%
# get bats that never met or were introduced
filter(treatment_rank == 1 | treatment_rank == 3 ) %>%
# label familiar as TRUE/FALSE
mutate(fam = treatment_rank > 1)
# fit model with nonkin females that were introduced together or not
fit.intro <-
brm(sim ~
fam +
(1|mm(bat1,bat2)),
data = t,
family = "beta",
seed = 123,
cores = nchains,
chains = nchains,
iter = chain_length,
warmup = warmup_length)
# save posterior predictive check
(pp3 <- pp_check(fit.intro, ndraws=100) + ggtitle("Model 3 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "Arial")))
# get model results
coefs.intro <-
summary(fit.intro)$fixed %>%
rownames_to_column(var= "term") %>%
filter(term!= "Intercept") %>%
mutate(predictor= "caged together") %>%
mutate(n.pairs= nrow(t)) %>%
mutate(sample= "pairs of unrelated female adults caught from different sites")
# get variables
get_variables(fit.intro)
# get samples from posterior distribution
pintro <-
fit.intro %>%
spread_draws(b_famTRUE) %>%
mutate(model = "Model3") %>%
pivot_longer(b_famTRUE, names_to = 'term', values_to= 'coeff')
remove(t)
# MODEL 4: Does female within-group affiliation rate predict contact call similarity?------------
#***plot affiliation effect-------------
# get relevant data
# pairs of female bats in the same group
t <-
d %>%
# exclude pairs with bats that could never groom
filter(!is.na(affiliation.lograte)) %>%
filter(kinship <0.05) %>%
filter(both_adult) %>%
filter(dyad.sex== "female") %>%
mutate(colony= substring(study_site,1,4)) %>%
mutate(affiliation= affiliation.rate> 0) %>%
mutate(type= ifelse(colony== "2014", "food sharing in stable colony", "mostly allogrooming in merged colony"))
# plot
(p <-
t %>%
ggplot(aes(x=affiliation.lograte, y=sim, color= colony))+
facet_wrap(~type, scales= "free_x")+
geom_point(size=2)+
geom_smooth(method="lm")+
xlab("within-group affiliation log rate")+
ylab("contact call similarity")+
scale_color_brewer(palette= "Dark2")+
theme_bw()+
theme(legend.position = "top"))
# save plot
ggsave(
"affiliation_plot.pdf",
plot = p,
scale = 1,
width = 6,
height = 5,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# ***fit affiliation model ------------
fit.aff <-
brm(sim ~
scale(affiliation.lograte) +
(1|mm(bat1,bat2)),
data = t,
family = "beta",
seed = 123,
cores = nchains,
chains = nchains,
iter = chain_length,
warmup = warmup_length)
# save posterior predictive check
(pp4 <- pp_check(fit.aff, ndraws=100) + ggtitle("Model 4 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "Arial")))
# get model results
(coefs.aff <-
summary(fit.aff)$fixed %>%
rownames_to_column(var= "term") %>%
filter(term!= "Intercept") %>%
mutate(predictor= "within-colony affiliation") %>%
mutate(n.pairs= nrow(t)) %>%
mutate(sample= "pairs of unrelated female adults caged together"))
# get variables
get_variables(fit.aff)
# get samples from posterior distribution
pc <-
fit.aff %>%
spread_draws(b_scaleaffiliation.lograte) %>%
mutate(model = "Model4") %>%
pivot_longer(b_scaleaffiliation.lograte, names_to = 'term', values_to= 'coeff')
remove(t)
# MODEL 5: Does female within-group non-kin food sharing predict contact call similarity?------------
# conditioning on kinship
# get relevant data
t <-
d %>%
filter(both_adult) %>%
filter(kinship <0.05) %>%
filter(dyad.sex== "female") %>%
mutate(colony= substring(study_site,1,4)) %>%
filter(!is.na(donation.rate)) %>%
mutate(share = ifelse(donation.rate>0, "food-sharing\nfemale pairs", "non-sharing\nfemale pairs")) %>%
mutate(share = factor(share)) %>%
mutate(share = fct_rev(share)) %>%
mutate(type= ifelse(colony== "2014", "long-term stable colony (2014)", "merged colony (2017)"))
# get data from all pairs (not just female pairs)
t2 <-
d %>%
filter(both_adult) %>%
filter(kinship <0.05) %>%
mutate(colony= substring(study_site,1,4)) %>%
filter(!is.na(donation.rate)) %>%
mutate(share = ifelse(donation.rate>0, "food-sharing\npairs", "non-sharing\npairs")) %>%
mutate(share = factor(share)) %>%
mutate(share = fct_rev(share)) %>%
mutate(type= ifelse(colony== "2014", "long-term stable colony (2014)", "merged colony (2017)"))
#*** plot food sharing effect--------
# plot
(p1 <-
t %>%
ggplot(aes(x=donation.lograte, y=sim))+
facet_wrap(~type, scales= "free_x")+
geom_point(size=2, alpha=0.4)+
geom_smooth(method="lm")+
xlab("food sharing log rate")+
ylab("contact call similarity")+
scale_color_brewer(palette= "Dark2")+
theme_bw()+
theme(legend.position = "none"))
# plot means and 95% CIs
means <-
t %>%
boot_ci2(x = .$share, y= .$sim)
points <-
t %>%
mutate(effect= share)
(p2 <-
means %>%
mutate(effect= fct_rev(effect)) %>%
mutate(label= "female nonkin pairs") %>%
ggplot(aes(x=effect, y=mean))+
facet_wrap(~ label)+
geom_jitter(data= points, aes(y= sim), size=2, alpha=0.4, height=0, width=0.1)+
geom_point(position = position_nudge(x = 0.25), size=3, color= "blue")+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), position = position_nudge(x = 0.25), size=1, color= "blue")+
xlab("")+
theme_bw()+
theme(axis.text.x = element_text(size=11),
axis.text.y= element_blank(),
axis.title.y = element_blank()))
# same plot with both sexes
means2 <-
t2 %>%
boot_ci2(x = .$share, y= .$sim)
points2 <-
t2 %>%
mutate(effect= share)
(p3 <-
means2 %>%
mutate(label= "all nonkin pairs") %>%
ggplot(aes(x=effect, y=mean))+
facet_wrap(~ label)+
geom_jitter(data= points2, aes(y= sim), size=2, alpha=0.4, height=0, width=0.1)+
geom_point(position = position_nudge(x = 0.25), size=3, color= "blue")+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), position = position_nudge(x = 0.25), size=1, color= "blue")+
xlab("")+
theme_bw()+
theme(axis.text.x = element_text(size=11),
axis.text.y= element_blank(),
axis.title.y = element_blank()))
(p4 <- p1+p2+p3 +plot_layout(widths= c(2,1,1))+ plot_annotation(tag_levels = c("A", "B", "C")))
# save plot
ggsave(
"sharing_plot.pdf",
plot = p4,
scale = 1,
width = 10,
height = 5,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# ***fit sharing effect model------------
fit.s <-
brm(sim ~
scale(donation.lograte)+
(1|mm(bat1,bat2)),
data = t,
family = "beta",
seed = 123,
cores = nchains,
chains = nchains,
iter = chain_length,
warmup = warmup_length)
# save posterior predictive check
(pp5 <- pp_check(fit.s, ndraws=100) + ggtitle("Model 5 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "Arial")))
# get model results
(coefs.s <-
summary(fit.s)$fixed %>%
rownames_to_column(var= "term") %>%
filter(term!= "Intercept") %>%
mutate(predictor= "within-colony food sharing") %>%
mutate(n.pairs= nrow(t)) %>%
mutate(sample= "pairs of unrelated female adults caged together"))
# get variables
get_variables(fit.s)
# get samples from posterior distribution
ps <-
fit.s %>%
spread_draws(b_scaledonation.lograte) %>%
mutate(model = "Model5") %>%
pivot_longer(b_scaledonation.lograte, names_to = 'term', values_to= 'coeff')
remove(t)
# COMPILE all coefficients ------
(all_coefs <- rbind(coefs.k,coefs.k2, coefs.intro,coefs.aff, coefs.s))
# save coefficients as csv
all_coefs %>%
cbind(tibble(Model= c(1,2,2,2,3,4,5))) %>%
mutate(Sample= paste(n.pairs, sample)) %>%
mutate(Term= case_when(
term == "scalekinship" ~ "kinship (scaled)",
term == "scaleaffiliation.lograte" ~ "affiliation log rate (scaled)",
term == "familiarTRUE" ~ "caged together (T/F)",
term == "famTRUE" ~ "caged together (T/F)",
term == "scaledonation.lograte" ~ "food sharing log rate (scaled)",
TRUE ~ "error")) %>%
dplyr::select(Model, Sample, Term, Estimate:Tail_ESS) %>%
write.csv(file="model_results.csv")
# COMPILE all posterior distributions ------
(all_post <- rbind(pk,pk2, pintro,pc, ps))
# plot all posterior distributions--------
(models.plot <-
all_post %>%
filter(term != "b_captured.togetherTRUE") %>%
mutate(label= paste(model, term)) %>%
mutate(label= case_when(
label == "Model1 b_scalekinship" ~
"1. model 1: kinship",
label == "Model2 b_scalekinship" ~
"2. model 2: kinship\n(covariates: affiliation\nand co-housing)",
label == "Model2 b_scaleaffiliation.lograte"~
"3. model 2: affiliation\n(covariates: kinship\nand co-housing)",
label == "Model2 b_familiarTRUE" ~
"4. model 2: co-housing\n(covariates: affiliation\nand kinship)",
label== "Model3 b_famTRUE" ~
"5. model 3: co-housing\n(only nonkin females)",
label == "Model4 b_scaleaffiliation.lograte" ~
"6. model 4: affiliation \n(only co-housed\nnonkin females)",
label == "Model5 b_scaledonation.lograte" ~
"7. model 5: food sharing\n(only co-housed\nnonkin females)",
TRUE ~ "error")) %>%
mutate(label= fct_rev(label)) %>%
ggplot(aes(y = label, x = coeff, fill=model)) +
stat_halfeye(.width = c(0.95), linewidth= 5, size=5)+
geom_vline(xintercept = 0)+
ylab("")+
xlab("estimated effect on vocal similarity (coefficient)")+
theme_bw()+
theme(legend.position= 'none',
axis.text.y = element_text(size = 10, vjust = 0.5, hjust = 0.5)))
# save plot
ggsave(
"summary_plot.pdf",
plot = models.plot,
scale = 1,
width = 5.5,
height = 6.5,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# save posterior predictive check-----
pp <- pp1 / pp2 / pp3 / pp4 / pp5
# save plot
ggsave(
"pp_check.pdf",
plot = pp,
scale = 1,
width = 4,
height = 6,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# analysis for 2024 paired recordings
# question 1: do different bats call different amounts? does calling rate depend on recipient?
# use Bayesian social relations model, strand package
# actor, receiver, and interaction automatically included
# response variable = call count
# predictor = age, kinship, foodsharing, grooming, combined rate; then foodsharing, grooming, combined rate all w/kinship
# results: effects of actor's tendency to call, receiver's tendency to receive, correlation at dyadic level between caller calling and receiver calling (do the bats I call to more call to me more, controlling for overall calling and receiving rate), correlation at group level (if I call more to the group, does the group call more to me?) and THEN finally will tell us whether bats are calling more depending on predictor variable
# how to make use of added power from 3 replicate matrices? for now, take average, but keep thinking about this
# Julia Vrtilek
# Adapted from Haley Gmutza, May 2025
# load packages
library(STRAND)
library(tidyverse)
library(igraph)
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/pairs")
# load and wrangle vocal data ----
batcalls <- readRDS("vocal_data_2024-pairs.RDS") %>%
group_by(caller, receiver) %>%
summarize(n.calls = n()) %>%
ungroup() %>%
add_row(caller = "quark", # quark never called; adding this row makes names appear alphabetically
receiver = "yikes", n.calls = 0) %>%
arrange(caller)
netcalls <- graph_from_data_frame(batcalls)
mcalls <- as_adjacency_matrix(netcalls, attr= 'n.calls', sparse=F)
nets = list(call = mcalls)
bats.used <- rownames(mcalls)
bats.used
# load and wrangle social data ----
# function to make scale() function return a vector not a matrix
scale2 <- function(x){as.vector(scale(x, scale = FALSE))}
# already trimmed bat donations list
raw <- read.csv('OSU_2024_social_data.csv')
raw$Date <- as.Date(raw$Date, format = "%m/%d/%Y")
donations <- raw %>%
filter(Date < "2024-09-01")
# how many hours of video data were scored?
hours <- length(unique(donations$Date))
seconds <- hours*3600
# matches Haley's personal communication
donations$Actor <- tolower(donations$Actor)
donations$Receiver <- tolower(donations$Receiver)
bat.donations <- donations %>%
filter(Actor %in% bats.used) %>%
filter(Receiver %in% bats.used) %>%
mutate(rate2 = rate/seconds)
# make foodsharing matrix
ratesf <-
bat.donations %>%
filter(Behavior == "Mouthlicking") %>%
mutate(edge= paste(Actor, Receiver, sep="_")) %>%
group_by(edge) %>%
summarize(rate2= sum(rate2, na.rm=T)) %>%
filter(rate2>=0) %>%
separate(edge, into=c('Actor', 'Receiver')) %>%
mutate(across(.cols=rate2, .fns = scale2))
netf <- graph_from_data_frame(ratesf)
mf <- as_adjacency_matrix(netf, attr= 'rate2', sparse=F)
# make grooming matrix
ratesg <-
bat.donations %>%
filter(Behavior == "Grooming") %>%
mutate(edge= paste(Actor, Receiver, sep="_")) %>%
group_by(edge) %>%
summarize(rate2= sum(rate2, na.rm=T)) %>%
filter(rate2>=0) %>%
separate(edge, into=c('Actor', 'Receiver')) %>%
mutate(across(.cols=rate2, .fns = scale2))
netg <- graph_from_data_frame(ratesg)
mg <- as_adjacency_matrix(netg, attr= 'rate2', sparse=F)
# make combined "affiliation rate"
# NOTE: don't know possible grooming/foodsharing seconds, but should be the same for all dyads?
ratesa <-
bat.donations %>%
filter(Behavior != "Aggression") %>%
mutate(edge= paste(Actor, Receiver, sep="_")) %>%
group_by(edge) %>%
summarize(rate2= sum(rate2, na.rm=T)) %>%
filter(rate2>=0) %>%
separate(edge, into=c('Actor', 'Receiver')) %>%
mutate(across(.cols=rate2, .fns = scale2))
neta <- graph_from_data_frame(ratesa)
ma <- as_adjacency_matrix(neta, attr= 'rate2', sparse=F)
library(vegan)
mantel(mcalls, mg, na.rm = T, method = "spearman")
mantel(mcalls, mf, na.rm = T, method = "spearman")
mantel(mcalls, ma, na.rm = T, method = "spearman")
mantel(mcalls, distmat, na.rm = T, method = "spearman")
# dyadic variables - kinship, foodsharing
raw.kin <- read.table('kinship/KING.txt')
colnames(raw.kin) <- tolower(colnames(raw.kin))
rownames(raw.kin) <- tolower(rownames(raw.kin))
distmat <- raw.kin %>%
select(all_of(bats.used)) %>%
filter(row.names(raw.kin) %in% bats.used)
distmat <- data.matrix(distmat)
mantel(mcalls, distmat, na.rm = T, method = "spearman")
