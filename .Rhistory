filter(treatment_rank != 2) %>%
mutate(treatment_label = substring(treatment_label, first= 4, last= 100)) %>%
# set order for plot
mutate(treatment_label = factor(treatment_label, levels= c("never met", "different wild roost\nthen caged together", "same wild roost\nthen caged together","same long-term \ncaptive colony")))
# plot means and 95% CIs
means <-
t %>%
filter(!is.na(treatment_label)) %>%
boot_ci2(x = .$treatment_label, y= .$sim)
points <-
t %>%
filter(!is.na(treatment_label)) %>%
mutate(effect= treatment_label)
# plot with raw data
(p3 <-
means %>%
ggplot(aes(x=effect, y=mean))+
geom_jitter(data= points, aes(y= sim), size=1, alpha=0.4, height=0, width=0.1, color= "darkgrey")+
geom_boxplot(data= points, aes(y= sim), width=0.1, fill=NA, color="black", outlier.shape=NA)+
geom_point(position = position_nudge(x = 0.25), size=1)+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), position = position_nudge(x = 0.25), size=1)+
ylab("contact call similarity")+
xlab("familiarity level")+
scale_colour_brewer(palette= "Dark2")+
geom_hline(yintercept = means[1,"mean"], col = "black")+
theme_bw()+
theme(legend.position = "none"))
# plot without raw data
(p4 <-
means %>%
ggplot(aes(x=effect, y=mean))+
geom_point(size=3)+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), size=1)+
ylab("contact call similarity")+
xlab(" \nfamiliarity level")+
scale_colour_brewer(palette= "Dark2")+
geom_hline(yintercept = means[1,"mean"], col = "black")+
theme_bw()+
theme(axis.text.x = element_text(size = 11))+
theme(legend.position = "none"))
# combine plots
# remove x-axis from top plot
p3a <-
p3+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
(p5 <- p3a/p4)
# save plot
ggsave(
"familiarity_plot.pdf",
plot = p5,
scale = 1,
width = 7,
height = 5,
units = c("in", "cm", "mm", "px"),
dpi = 300)
#*** fit model for introduction effect-------
# get relevant data to analyze
# get pairs of nonkin females that never met (treatment rank 1) and ones that were introduced (treatment rank 3)
# compare those two groups treatment rank 1 vs 3
t <-
d %>%
filter(both_adult) %>%
# get female dyads
filter(dyad.sex== "female") %>%
# get nonkin dyads
filter(kinship == 0) %>%
# get bats that never met or were introduced
filter(treatment_rank == 1 | treatment_rank == 3 ) %>%
# label familiar as TRUE/FALSE
mutate(fam = treatment_rank > 1)
# fit model with nonkin females that were introduced together or not
fit.intro <-
brm(sim ~
fam +
(1|mm(bat1,bat2)),
data = t,
family = "beta",
seed = 123,
cores = nchains,
chains = nchains,
iter = chain_length,
warmup = warmup_length)
# save posterior predictive check
(pp3 <- pp_check(fit.intro, ndraws=100) + ggtitle("Model 3 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "Arial")))
# get model results
coefs.intro <-
summary(fit.intro)$fixed %>%
rownames_to_column(var= "term") %>%
filter(term!= "Intercept") %>%
mutate(predictor= "caged together") %>%
mutate(n.pairs= nrow(t)) %>%
mutate(sample= "pairs of unrelated female adults caught from different sites")
# get variables
get_variables(fit.intro)
# get samples from posterior distribution
pintro <-
fit.intro %>%
spread_draws(b_famTRUE) %>%
mutate(model = "Model3") %>%
pivot_longer(b_famTRUE, names_to = 'term', values_to= 'coeff')
remove(t)
# MODEL 4: Does female within-group affiliation rate predict contact call similarity?------------
#***plot affiliation effect-------------
# get relevant data
# pairs of female bats in the same group
t <-
d %>%
# exclude pairs with bats that could never groom
filter(!is.na(affiliation.lograte)) %>%
filter(kinship <0.05) %>%
filter(both_adult) %>%
filter(dyad.sex== "female") %>%
mutate(colony= substring(study_site,1,4)) %>%
mutate(affiliation= affiliation.rate> 0) %>%
mutate(type= ifelse(colony== "2014", "food sharing in stable colony", "mostly allogrooming in merged colony"))
# plot
(p <-
t %>%
ggplot(aes(x=affiliation.lograte, y=sim, color= colony))+
facet_wrap(~type, scales= "free_x")+
geom_point(size=2)+
geom_smooth(method="lm")+
xlab("within-group affiliation log rate")+
ylab("contact call similarity")+
scale_color_brewer(palette= "Dark2")+
theme_bw()+
theme(legend.position = "top"))
# save plot
ggsave(
"affiliation_plot.pdf",
plot = p,
scale = 1,
width = 6,
height = 5,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# ***fit affiliation model ------------
fit.aff <-
brm(sim ~
scale(affiliation.lograte) +
(1|mm(bat1,bat2)),
data = t,
family = "beta",
seed = 123,
cores = nchains,
chains = nchains,
iter = chain_length,
warmup = warmup_length)
# save posterior predictive check
(pp4 <- pp_check(fit.aff, ndraws=100) + ggtitle("Model 4 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "Arial")))
# get model results
(coefs.aff <-
summary(fit.aff)$fixed %>%
rownames_to_column(var= "term") %>%
filter(term!= "Intercept") %>%
mutate(predictor= "within-colony affiliation") %>%
mutate(n.pairs= nrow(t)) %>%
mutate(sample= "pairs of unrelated female adults caged together"))
# get variables
get_variables(fit.aff)
# get samples from posterior distribution
pc <-
fit.aff %>%
spread_draws(b_scaleaffiliation.lograte) %>%
mutate(model = "Model4") %>%
pivot_longer(b_scaleaffiliation.lograte, names_to = 'term', values_to= 'coeff')
remove(t)
# MODEL 5: Does female within-group non-kin food sharing predict contact call similarity?------------
# conditioning on kinship
# get relevant data
t <-
d %>%
filter(both_adult) %>%
filter(kinship <0.05) %>%
filter(dyad.sex== "female") %>%
mutate(colony= substring(study_site,1,4)) %>%
filter(!is.na(donation.rate)) %>%
mutate(share = ifelse(donation.rate>0, "food-sharing\nfemale pairs", "non-sharing\nfemale pairs")) %>%
mutate(share = factor(share)) %>%
mutate(share = fct_rev(share)) %>%
mutate(type= ifelse(colony== "2014", "long-term stable colony (2014)", "merged colony (2017)"))
# get data from all pairs (not just female pairs)
t2 <-
d %>%
filter(both_adult) %>%
filter(kinship <0.05) %>%
mutate(colony= substring(study_site,1,4)) %>%
filter(!is.na(donation.rate)) %>%
mutate(share = ifelse(donation.rate>0, "food-sharing\npairs", "non-sharing\npairs")) %>%
mutate(share = factor(share)) %>%
mutate(share = fct_rev(share)) %>%
mutate(type= ifelse(colony== "2014", "long-term stable colony (2014)", "merged colony (2017)"))
#*** plot food sharing effect--------
# plot
(p1 <-
t %>%
ggplot(aes(x=donation.lograte, y=sim))+
facet_wrap(~type, scales= "free_x")+
geom_point(size=2, alpha=0.4)+
geom_smooth(method="lm")+
xlab("food sharing log rate")+
ylab("contact call similarity")+
scale_color_brewer(palette= "Dark2")+
theme_bw()+
theme(legend.position = "none"))
# plot means and 95% CIs
means <-
t %>%
boot_ci2(x = .$share, y= .$sim)
points <-
t %>%
mutate(effect= share)
(p2 <-
means %>%
mutate(effect= fct_rev(effect)) %>%
mutate(label= "female nonkin pairs") %>%
ggplot(aes(x=effect, y=mean))+
facet_wrap(~ label)+
geom_jitter(data= points, aes(y= sim), size=2, alpha=0.4, height=0, width=0.1)+
geom_point(position = position_nudge(x = 0.25), size=3, color= "blue")+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), position = position_nudge(x = 0.25), size=1, color= "blue")+
xlab("")+
theme_bw()+
theme(axis.text.x = element_text(size=11),
axis.text.y= element_blank(),
axis.title.y = element_blank()))
# same plot with both sexes
means2 <-
t2 %>%
boot_ci2(x = .$share, y= .$sim)
points2 <-
t2 %>%
mutate(effect= share)
(p3 <-
means2 %>%
mutate(label= "all nonkin pairs") %>%
ggplot(aes(x=effect, y=mean))+
facet_wrap(~ label)+
geom_jitter(data= points2, aes(y= sim), size=2, alpha=0.4, height=0, width=0.1)+
geom_point(position = position_nudge(x = 0.25), size=3, color= "blue")+
geom_errorbar(aes(ymin=low, ymax=high, width=.1), position = position_nudge(x = 0.25), size=1, color= "blue")+
xlab("")+
theme_bw()+
theme(axis.text.x = element_text(size=11),
axis.text.y= element_blank(),
axis.title.y = element_blank()))
(p4 <- p1+p2+p3 +plot_layout(widths= c(2,1,1))+ plot_annotation(tag_levels = c("A", "B", "C")))
# save plot
ggsave(
"sharing_plot.pdf",
plot = p4,
scale = 1,
width = 10,
height = 5,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# ***fit sharing effect model------------
fit.s <-
brm(sim ~
scale(donation.lograte)+
(1|mm(bat1,bat2)),
data = t,
family = "beta",
seed = 123,
cores = nchains,
chains = nchains,
iter = chain_length,
warmup = warmup_length)
# save posterior predictive check
(pp5 <- pp_check(fit.s, ndraws=100) + ggtitle("Model 5 posterior predictive check") +
theme(legend.position = "none", text = element_text(family = "Arial")))
# get model results
(coefs.s <-
summary(fit.s)$fixed %>%
rownames_to_column(var= "term") %>%
filter(term!= "Intercept") %>%
mutate(predictor= "within-colony food sharing") %>%
mutate(n.pairs= nrow(t)) %>%
mutate(sample= "pairs of unrelated female adults caged together"))
# get variables
get_variables(fit.s)
# get samples from posterior distribution
ps <-
fit.s %>%
spread_draws(b_scaledonation.lograte) %>%
mutate(model = "Model5") %>%
pivot_longer(b_scaledonation.lograte, names_to = 'term', values_to= 'coeff')
remove(t)
# COMPILE all coefficients ------
(all_coefs <- rbind(coefs.k,coefs.k2, coefs.intro,coefs.aff, coefs.s))
# save coefficients as csv
all_coefs %>%
cbind(tibble(Model= c(1,2,2,2,3,4,5))) %>%
mutate(Sample= paste(n.pairs, sample)) %>%
mutate(Term= case_when(
term == "scalekinship" ~ "kinship (scaled)",
term == "scaleaffiliation.lograte" ~ "affiliation log rate (scaled)",
term == "familiarTRUE" ~ "caged together (T/F)",
term == "famTRUE" ~ "caged together (T/F)",
term == "scaledonation.lograte" ~ "food sharing log rate (scaled)",
TRUE ~ "error")) %>%
dplyr::select(Model, Sample, Term, Estimate:Tail_ESS) %>%
write.csv(file="model_results.csv")
# COMPILE all posterior distributions ------
(all_post <- rbind(pk,pk2, pintro,pc, ps))
# plot all posterior distributions--------
(models.plot <-
all_post %>%
filter(term != "b_captured.togetherTRUE") %>%
mutate(label= paste(model, term)) %>%
mutate(label= case_when(
label == "Model1 b_scalekinship" ~
"1. model 1: kinship",
label == "Model2 b_scalekinship" ~
"2. model 2: kinship\n(covariates: affiliation\nand co-housing)",
label == "Model2 b_scaleaffiliation.lograte"~
"3. model 2: affiliation\n(covariates: kinship\nand co-housing)",
label == "Model2 b_familiarTRUE" ~
"4. model 2: co-housing\n(covariates: affiliation\nand kinship)",
label== "Model3 b_famTRUE" ~
"5. model 3: co-housing\n(only nonkin females)",
label == "Model4 b_scaleaffiliation.lograte" ~
"6. model 4: affiliation \n(only co-housed\nnonkin females)",
label == "Model5 b_scaledonation.lograte" ~
"7. model 5: food sharing\n(only co-housed\nnonkin females)",
TRUE ~ "error")) %>%
mutate(label= fct_rev(label)) %>%
ggplot(aes(y = label, x = coeff, fill=model)) +
stat_halfeye(.width = c(0.95), linewidth= 5, size=5)+
geom_vline(xintercept = 0)+
ylab("")+
xlab("estimated effect on vocal similarity (coefficient)")+
theme_bw()+
theme(legend.position= 'none',
axis.text.y = element_text(size = 10, vjust = 0.5, hjust = 0.5)))
# save plot
ggsave(
"summary_plot.pdf",
plot = models.plot,
scale = 1,
width = 5.5,
height = 6.5,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# save posterior predictive check-----
pp <- pp1 / pp2 / pp3 / pp4 / pp5
# save plot
ggsave(
"pp_check.pdf",
plot = pp,
scale = 1,
width = 4,
height = 6,
units = c("in", "cm", "mm", "px"),
dpi = 300)
# filter calls that are too short and transform time variables
# Julia Vrtilek, May 2025
# load packages
library(tidyverse)
# set working directory
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/pairs")
# combine fundamental frequency measures and spectro_analysis measures
spec <- readRDS("spectro_analysis_2025-05-06.RDS") %>%
mutate(ID = paste(sound.files, caller, sep = "_"))
ff <- readRDS("fundfreq_measures_2025-05-08.RDS") %>%
mutate(ID = paste(sound.files, caller, sep = "_")) %>%
select(ID, maxslope:segments)
d <- inner_join(spec, ff, by = "ID") %>%
mutate(date = substring(date, 1, 10)) %>%
select(!ID)
# convert seconds to milliseconds
d$duration <- d$duration * 1000
d$time.median <- d$time.median * 1000
d$time.Q25 <- d$time.Q25 * 1000
d$time.Q75 <- d$time.Q75 * 1000
d$time.IQR <- d$time.IQR * 1000
# filter duration, peak frequency, and time variables to remove sounds that are not contact calls
d2 <- d %>%
filter(duration > 3) %>%
filter(duration < 50) %>%
filter(peakf > 10) %>%
filter(time.Q25 > 0) %>%
filter(time.median > 0) %>%
filter(time.Q75 > 0) %>%
filter(time.IQR > 0) %>%
filter(!is.na(meanslope)) %>%
filter(!is.nan(meanslope))
# remove sounds that were manually designated not bat calls
x <- list.files("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/pairs/not_batcalls/")
not.batcalls <- as.data.frame(x) %>%
mutate(x2 = substr(x,1,nchar(x)-5)) %>%
separate(x2, into = c("date","numbers"), sep = "_") %>%
separate(numbers, into = c("wav","selec"), sep = "-") %>%
mutate(filter = paste(date, wav, selec, sep = "_"))
d3 <- d2 %>%
filter(!sound.files %in% not.batcalls$filter)
# function to make scale() function return a vector not a matrix
scale2 <- function(x){as.vector(scale(x, scale = FALSE))}
# convert time variables into percentages
d4 <- d3 %>%
mutate(time.Q25 = time.Q25/duration,
time.median = time.median/duration,
time.Q75 = time.Q75/duration,
time.IQR = time.IQR/duration) %>%
# scale all numeric variables to remove units
mutate(across(.cols=duration:peakf, .fns = scale2))
View(d4)
callstats <- d4 %>%
group_by(caller) %>%
summarize(n = n())
View(callstats)
callstats <- d4 %>%
group_by(caller) %>%
summarize(n = n()) %>%
arrange(n)
View(callstats)
mean <- mean(callstats$n)
# analysis for 2024 paired recordings
# question 2: do bats sound different depending on recipient?
# for each bat, do a DFA to assign calls to receiver, for loop through bats
# Julia Vrtilek, May 2025
# load packages
library(MASS)
library(tidyverse)
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/pairs")
# load data
batcalls <- readRDS("vocal_data_2024-pairs_transformed.RDS") %>%
mutate(date = as.Date(date)) %>%
mutate(session = case_when(date < "2024-07-22" ~ 1,
date > "2024-07-21" & date < "2024-07-29" ~ 2,
date > "2024-07-28" ~ 3))
# make list of one df per caller
bycaller <- batcalls %>%
group_split(caller)
# make results df
results <- setNames(data.frame(matrix(ncol = 12, nrow = 7)),
c("caller","correct.cases","all.cases","accuracy",
"range.assign.low","range.assign.high","mean.assign","median.assign",
"range.call.low","range.call.high","mean.call","median.call"))
for (i in 1:7) {
results$caller[i] <- bycaller[[i]]$caller[1]
dfa <- lda(receiver ~
duration+
meanfreq+
sd+
freq.median+
freq.Q25+
freq.Q75+
freq.IQR+
time.median+
time.Q25+
time.Q75+
time.IQR+
skew+
kurt+
sp.ent+
time.ent+
entropy+
sfm+
meandom+
mindom+
maxdom+
dfrange+
modindx+
startdom+
enddom+
dfslope+
meanpeakf+
peakf+
maxslope+
minslope+
abs_minslope+
pos_slopes+
neg_slopes+
turns+
meanslope+
segments,
CV=T,
data=bycaller[[i]])
# get classification matrix
cm <- table(bycaller[[i]]$receiver, dfa$class)
# get overall correct classification rate (accuracy)
# this is the best accuracy estimate
results$correct.cases[i] <- sum(diag(cm))
results$all.cases[i] <- sum(cm)
results$accuracy[i] <- results$correct.cases[i]/results$all.cases[i]
# see median, mean, and range of correct assignments/all assignments to each bat
results$range.assign.low[i] <- range(diag(cm)/colSums(cm), na.rm=T)[1]
results$range.assign.high[i] <- range(diag(cm)/colSums(cm), na.rm=T)[2]
results$mean.assign[i] <- mean(diag(cm)/colSums(cm), na.rm=T)
results$median.assign[i] <- median(diag(cm)/colSums(cm), na.rm=T)
# see median, mean and range of correct assignments/all calls from each bat
results$range.call.low[i] <- range(diag(cm)/rowSums(cm), na.rm=T)[1]
results$range.call.high[i] <- range(diag(cm)/rowSums(cm), na.rm=T)[2]
results$mean.call[i] <- mean(diag(cm)/rowSums(cm), na.rm=T)
results$median.call[i] <- median(diag(cm)/rowSums(cm), na.rm=T)
}
View(results)
results2 <- results %>%
pivot_longer()
View(results)
results2 <- results %>% pivot_longer(cols = 2:12)
View(results2)
View(results)
results2 <- results %>% pivot_longer(cols = 2:12, names_to = "caller")
results2 <- results %>% pivot_longer(cols = 2:12, names_to = caller)
View(results)
write.csv(results, file = "/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/pairs/callerDFAresults.csv")
